Java Concept

OOD Concepts:
Polymorphism
Overriding (runtime): a class method in a child class has the same name and signature as a method in the parent class.
Overloading (compile): same method names with:
    - Different method signature and different number or type of parameters.
    - Same method signature but the different number of parameters.
    - Same method signature and same number of parameters but of different type

Inheritance: Inheritance allows a Child class to inherit properties from its parent class. Only properties with access modifier public and protected can be accessed in child class.
Java does not support multiple inheritance of Class (extend multiple classes)
Java allows multiple inheritance of Interface
    - all the methods in interface are public and abstract
    - all the fields are public, static and final

Abstraction is a way of converting real world objects in terms of class
Encapsulation is achieved by combining the methods and attribute into a class. The class acts like a container encapsulating the properties.
Association is a relationship where all object have their own lifecycle and there is no owner.
Aggregation is a specialized form of Association where all objects have their own lifecycle but there is ownership and child object can not belongs to another parent object.
Composition is specialized form of Aggregation and we can call this as a "death" relationship. It is a strong type of Aggregation. Child object does not have their lifecycle and if parent object deletes all child object will also be deleted.

Open/Closed Principle - software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification
Coupling - Coupling describes the degree of dependency between one entity to another entity.
Loose coupling is good because we don't want the components of our system to heavily depend on each other. We want to keep our system modular, where we can safely change one part without affecting the other.


Garbage Collector
Garbage Collector is to free heap memory by destroying unreachable objects
Garbage Collector is always running in the background
Finalize: before destroying the object, GC will call finalize() method to perform cleanup activities

Questions:
1. effect of private constructor
the class cannot be inherited
the only way to create an instance of the class it to provide a static public method like Factory Pattern

2. does the finally block get executed if we insert a return statement inside the try block
Yes in normal case except
the virtual machine exits or the thread killed

3. difference between final, finally and finalize
final variable - the variable or the reference variable cannot be modified
final method - cannot be overridden
final class - cannot be subclassed
finally - try-catch-finally blocks
finalize - garbage collection

4. java generics
eliminated the parameterized types when the source code is translated to the JVM byte code

5. object reflection
get reflective information about Java classes and objects
- get the information about the methods and fields present inside the class at runtime
- create new instance of a class
- get and set the object fields directly by getting field reference, regardless of what the access modifier is